/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.pgcl.reports;


import java.awt.Font;
import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.hssf.util.Region;
import org.apache.struts2.ServletActionContext;
import org.pgcl.actions.BaseAction;
import org.pgcl.dto.SalesDTO;
import org.pgcl.dto.UserDTO;



/** 
 * MyEclipse Struts
 * Creation date: 08-28-2008
 * 
 * XDoclet definition:
 * @struts.action
 * @struts.action-forward name="viewinfohead" path="/WEB-INF/brtcjsp/teacher/viewinfohead.jsp"
 */
public class TestExcel extends BaseAction {
	
	private static final long serialVersionUID = 1L;

	private static final String[] titles = {
		"Name",	"Gross Amount", "Tax Paid by BRTC", "Tax Paid at Source", "Net Amount",
		"Voucher No & Date","MR No & Date", "Requisition No & Date", "BRTC No & Date",
		"Work Title"
	};
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
/*	public String execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		SalesDTO salesDTO = (SalesDTO) form;

		String role = request.getSession().getAttribute("role").toString();
		
		UserDTO loggedInUser=(UserDTO) ServletActionContext.getRequest().getSession().getAttribute("user");	
		

		if(request.getSession().getAttribute("kbsform")!=null)
			salesDTO = (SalesDTO) request.getSession().getAttribute("kbsform");

		String validRole = "Teacher,dirBRTC,Head,COE,opBRTC";
		

		String returnPath = "";

		String systemID = null;
		

		/*if(!"-1".equals(bsForm.getPerson()) && !"all".equals(bsForm.getPerson()))
					bsForm.setChkPerson(null);

		SalesDTO saDto = new SalesDTO();
		List<SalesDTO> ls = null;
		//ls = infoDao.getPayInfo(bsForm.getBrtcno(), dept, isLeader);

		//ls = saDto.getPaymentInfo(role,salesDTO);
		if (ls == null || ls.size() == 0){
			//saDto.getSession().close();
			request.setAttribute("brtcerror", "No information found");
			request.setAttribute("backPath", "viewBRTCInfo.do?type=view");
			returnPath = "brtcerror";
		}
		else{
			//request.setAttribute("personinfo", ls);
			//request.getSession().setAttribute("kbsform", bsForm);

			HSSFWorkbook wb = new HSSFWorkbook();
			Map<String, HSSFCellStyle> styles = createStyles(wb);

			HSSFSheet sheet = wb.createSheet();
			HSSFRow row = sheet.createRow((short) 1);
			row.setHeightInPoints(45);
			HSSFCell titleCell = row.createCell((short) 1);
			titleCell.setCellValue("Bureau of Research Testing and Consultation (BRTC) Information");
			titleCell.setCellStyle(styles.get("title"));
			Region region = new Region( 1, (short) 1, 1, (short) 12 );

			//sheet.addMergedRegion(region);

			int index = 3;
			row = sheet.createRow((short) index);
			HSSFCell headerCell = null;
			for (int i = 0; i < titles.length; i++) {
	            headerCell = row.createCell((short)i);
	            headerCell.setCellValue(titles[i]);
	            headerCell.setCellStyle(styles.get("header"));
	        }

			SalesDTO cBean = new SalesDTO();
			for(int i=0;i<ls.size();i++){
				row = sheet.createRow((short) index+i+1);
				cBean = ls.get(i);
				row.createCell((short) 0).setCellValue(String.valueOf(i+1));
				row.createCell((short) 1).setCellValue(cBean.getCustomerCategory());
				row.createCell((short) 2).setCellValue(cBean.getActualExceptmin());
				row.createCell((short) 3).setCellValue(cBean.getActualConsumption());
				row.createCell((short) 4).setCellValue(cBean.getBillingUnit());
				row.createCell((short) 5).setCellValue(cBean.getDifference());
				row.createCell((short) 6).setCellValue(cBean.getTotalActualConsumption());
				row.createCell((short) 7).setCellValue(cBean.getRate());
				row.createCell((short) 8).setCellValue(cBean.getValueOfTotalActualConsumption());
				row.createCell((short) 9).setCellValue(cBean.getMinimumCharge());
				row.createCell((short) 9).setCellValue(cBean.getMeterRent());
				row.createCell((short) 9).setCellValue(cBean.getnHVhHV());
				row.createCell((short) 9).setCellValue(cBean.getTotalBillAmount());
			}

			try {
				ByteArrayOutputStream fileOut = new ByteArrayOutputStream();
				wb.write(fileOut);
				fileOut.close();
				response.setHeader("Content-Disposition",
				"attachment;filename=salesreport.xls");
				response.setContentType("application/vnd.ms-excel");
				response.getOutputStream().write(fileOut.toByteArray());
				return null;
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
		return mapping.findForward(returnPath);



	}*/

	private static Map<String, HSSFCellStyle> createStyles(HSSFWorkbook wb){
		Map<String, HSSFCellStyle> styles = new HashMap<String, HSSFCellStyle>();

		HSSFCellStyle style;
		HSSFFont titleFont = wb.createFont();
		titleFont.setFontHeightInPoints((short)18);
		titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
		style.setFont(titleFont);
		styles.put("title", style);

		HSSFFont monthFont = wb.createFont();
		monthFont.setFontHeightInPoints((short)11);
		monthFont.setColor(HSSFColor.BLACK.index);
		style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
		style.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);
		style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		style.setFont(monthFont);
		style.setWrapText(true);
		styles.put("header", style);

		style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		style.setWrapText(true);
		style.setBorderRight(HSSFCellStyle.BORDER_THIN);
		style.setRightBorderColor(HSSFColor.BLACK.index);
		style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		style.setLeftBorderColor(HSSFColor.BLACK.index);
		style.setBorderTop(HSSFCellStyle.BORDER_THIN);
		style.setTopBorderColor(HSSFColor.BLACK.index);
		style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		style.setBottomBorderColor(HSSFColor.BLACK.index);
		styles.put("cell", style);

		/*style = wb.createCellStyle();
        style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
        style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
        style.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);
        style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
        style.setDataFormat(wb.createDataFormat().getFormat("0.00"));
        styles.put("formula", style);

        style = wb.createCellStyle();
        style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
        style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
        style.setFillForegroundColor(HSSFColor.GREY_40_PERCENT.index);
        style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
        style.setDataFormat(wb.createDataFormat().getFormat("0.00"));
        styles.put("formula_2", style);*/

		return styles;
	}
}